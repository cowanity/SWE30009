============================= test session starts ==============================
platform darwin -- Python 3.11.4, pytest-8.2.0, pluggy-1.5.0
rootdir: /Users/vufanity/SWINBURNE MATERIALS/SWE30009/ProjectReport-104222099-Vu
collected 7 items

mutants/test_counting_sort_mutant_9.py .FFF.FF                           [100%]

=================================== FAILURES ===================================
__________________ TestCountingSort.test_basic_functionality ___________________

self = <test_counting_sort_mutant_9.TestCountingSort testMethod=test_basic_functionality>

    def test_basic_functionality(self):
>       self.assertEqual(counting_sort([4, 2, 5, 2, 3]), [2, 2, 3, 4, 5])

mutants/test_counting_sort_mutant_9.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = [4, 2, 5, 2, 3]

    def counting_sort(collection):
        """Pure implementation of counting sort algorithm in Python
        :param collection: some mutable ordered collection with heterogeneous
        comparable items inside
        :return: the same collection ordered by ascending
        Examples:
        >>> counting_sort([0, 5, 3, 2, 2])
        [0, 2, 2, 3, 5]
        >>> counting_sort([])
        []
        >>> counting_sort([-2, -5, -45])
        [-45, -5, -2]
        """
        # if the collection is empty, returns empty
        if collection == []:
            return []
    
        # get some information about the collection
        coll_len = len(collection)
        coll_max = max(collection)
        coll_min = min(collection)
    
        # create the counting array
        counting_arr_length = coll_max + 1 - coll_min
        counting_arr = [0] * counting_arr_length
    
        # count how much a number appears in the collection
        for number in collection:
            # Introducing a small, conditional defect
            if number == 7:
                counting_arr[number - coll_min] -= 1
            else:
                counting_arr[number - coll_min] += 1
    
        # sum each position with its predecessors. now, counting_arr[i] tells
        # us how many elements <= i has in the collection
        for i in range(1, counting_arr_length):
>           counting_arr[i] = counting_arr[i] + counting_arr[i + 1]
E           IndexError: list index out of range

mutants/counting_sort_mutant_9.py:49: IndexError
______________ TestCountingSort.test_concatenation_sorted_arrays _______________

self = <test_counting_sort_mutant_9.TestCountingSort testMethod=test_concatenation_sorted_arrays>

    def test_concatenation_sorted_arrays(self):
        sorted_a = [1, 2, 3]
        sorted_b = [4, 5, 6]
>       concatenated_and_sorted = counting_sort(sorted_a + sorted_b)

mutants/test_counting_sort_mutant_9.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = [1, 2, 3, 4, 5, 6]

    def counting_sort(collection):
        """Pure implementation of counting sort algorithm in Python
        :param collection: some mutable ordered collection with heterogeneous
        comparable items inside
        :return: the same collection ordered by ascending
        Examples:
        >>> counting_sort([0, 5, 3, 2, 2])
        [0, 2, 2, 3, 5]
        >>> counting_sort([])
        []
        >>> counting_sort([-2, -5, -45])
        [-45, -5, -2]
        """
        # if the collection is empty, returns empty
        if collection == []:
            return []
    
        # get some information about the collection
        coll_len = len(collection)
        coll_max = max(collection)
        coll_min = min(collection)
    
        # create the counting array
        counting_arr_length = coll_max + 1 - coll_min
        counting_arr = [0] * counting_arr_length
    
        # count how much a number appears in the collection
        for number in collection:
            # Introducing a small, conditional defect
            if number == 7:
                counting_arr[number - coll_min] -= 1
            else:
                counting_arr[number - coll_min] += 1
    
        # sum each position with its predecessors. now, counting_arr[i] tells
        # us how many elements <= i has in the collection
        for i in range(1, counting_arr_length):
>           counting_arr[i] = counting_arr[i] + counting_arr[i + 1]
E           IndexError: list index out of range

mutants/counting_sort_mutant_9.py:49: IndexError
__________________ TestCountingSort.test_element_duplication ___________________

self = <test_counting_sort_mutant_9.TestCountingSort testMethod=test_element_duplication>

    def test_element_duplication(self):
        original = [1, 2, 3]
        duplicated = original * 2  # Duplicate elements
>       self.assertEqual(counting_sort(duplicated), [1, 1, 2, 2, 3, 3])

mutants/test_counting_sort_mutant_9.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = [1, 2, 3, 1, 2, 3]

    def counting_sort(collection):
        """Pure implementation of counting sort algorithm in Python
        :param collection: some mutable ordered collection with heterogeneous
        comparable items inside
        :return: the same collection ordered by ascending
        Examples:
        >>> counting_sort([0, 5, 3, 2, 2])
        [0, 2, 2, 3, 5]
        >>> counting_sort([])
        []
        >>> counting_sort([-2, -5, -45])
        [-45, -5, -2]
        """
        # if the collection is empty, returns empty
        if collection == []:
            return []
    
        # get some information about the collection
        coll_len = len(collection)
        coll_max = max(collection)
        coll_min = min(collection)
    
        # create the counting array
        counting_arr_length = coll_max + 1 - coll_min
        counting_arr = [0] * counting_arr_length
    
        # count how much a number appears in the collection
        for number in collection:
            # Introducing a small, conditional defect
            if number == 7:
                counting_arr[number - coll_min] -= 1
            else:
                counting_arr[number - coll_min] += 1
    
        # sum each position with its predecessors. now, counting_arr[i] tells
        # us how many elements <= i has in the collection
        for i in range(1, counting_arr_length):
>           counting_arr[i] = counting_arr[i] + counting_arr[i + 1]
E           IndexError: list index out of range

mutants/counting_sort_mutant_9.py:49: IndexError
____________________ TestCountingSort.test_negative_numbers ____________________

self = <test_counting_sort_mutant_9.TestCountingSort testMethod=test_negative_numbers>

    def test_negative_numbers(self):
>       self.assertEqual(counting_sort([-2, -5, -45]), [-45, -5, -2])

mutants/test_counting_sort_mutant_9.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = [-2, -5, -45]

    def counting_sort(collection):
        """Pure implementation of counting sort algorithm in Python
        :param collection: some mutable ordered collection with heterogeneous
        comparable items inside
        :return: the same collection ordered by ascending
        Examples:
        >>> counting_sort([0, 5, 3, 2, 2])
        [0, 2, 2, 3, 5]
        >>> counting_sort([])
        []
        >>> counting_sort([-2, -5, -45])
        [-45, -5, -2]
        """
        # if the collection is empty, returns empty
        if collection == []:
            return []
    
        # get some information about the collection
        coll_len = len(collection)
        coll_max = max(collection)
        coll_min = min(collection)
    
        # create the counting array
        counting_arr_length = coll_max + 1 - coll_min
        counting_arr = [0] * counting_arr_length
    
        # count how much a number appears in the collection
        for number in collection:
            # Introducing a small, conditional defect
            if number == 7:
                counting_arr[number - coll_min] -= 1
            else:
                counting_arr[number - coll_min] += 1
    
        # sum each position with its predecessors. now, counting_arr[i] tells
        # us how many elements <= i has in the collection
        for i in range(1, counting_arr_length):
>           counting_arr[i] = counting_arr[i] + counting_arr[i + 1]
E           IndexError: list index out of range

mutants/counting_sort_mutant_9.py:49: IndexError
_____________________ TestCountingSort.test_scale_elements _____________________

self = <test_counting_sort_mutant_9.TestCountingSort testMethod=test_scale_elements>

    def test_scale_elements(self):
        original = [3, 1, 4, 1, 5]
        scaled = [x * 2 for x in original]
>       expected = [x * 2 for x in counting_sort(original)]

mutants/test_counting_sort_mutant_9.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = [3, 1, 4, 1, 5]

    def counting_sort(collection):
        """Pure implementation of counting sort algorithm in Python
        :param collection: some mutable ordered collection with heterogeneous
        comparable items inside
        :return: the same collection ordered by ascending
        Examples:
        >>> counting_sort([0, 5, 3, 2, 2])
        [0, 2, 2, 3, 5]
        >>> counting_sort([])
        []
        >>> counting_sort([-2, -5, -45])
        [-45, -5, -2]
        """
        # if the collection is empty, returns empty
        if collection == []:
            return []
    
        # get some information about the collection
        coll_len = len(collection)
        coll_max = max(collection)
        coll_min = min(collection)
    
        # create the counting array
        counting_arr_length = coll_max + 1 - coll_min
        counting_arr = [0] * counting_arr_length
    
        # count how much a number appears in the collection
        for number in collection:
            # Introducing a small, conditional defect
            if number == 7:
                counting_arr[number - coll_min] -= 1
            else:
                counting_arr[number - coll_min] += 1
    
        # sum each position with its predecessors. now, counting_arr[i] tells
        # us how many elements <= i has in the collection
        for i in range(1, counting_arr_length):
>           counting_arr[i] = counting_arr[i] + counting_arr[i + 1]
E           IndexError: list index out of range

mutants/counting_sort_mutant_9.py:49: IndexError
=========================== short test summary info ============================
FAILED mutants/test_counting_sort_mutant_9.py::TestCountingSort::test_basic_functionality
FAILED mutants/test_counting_sort_mutant_9.py::TestCountingSort::test_concatenation_sorted_arrays
FAILED mutants/test_counting_sort_mutant_9.py::TestCountingSort::test_element_duplication
FAILED mutants/test_counting_sort_mutant_9.py::TestCountingSort::test_negative_numbers
FAILED mutants/test_counting_sort_mutant_9.py::TestCountingSort::test_scale_elements
========================= 5 failed, 2 passed in 0.02s ==========================
